name: Publish to NPM

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Update package.json version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TARGET_VERSION=${{ steps.get_version.outputs.VERSION }}
        
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
          npm version $TARGET_VERSION --no-git-tag-version
          echo "Updated version from $CURRENT_VERSION to $TARGET_VERSION"
        else
          echo "Version is already $TARGET_VERSION, no update needed"
        fi
      
    - name: Check if version exists on NPM
      id: check_version
      run: |
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # Check if version exists
        if npm view "$PACKAGE_NAME@$VERSION" version 2>/dev/null; then
          echo "Version $VERSION already exists on NPM"
          echo "EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "Version $VERSION does not exist on NPM"
          echo "EXISTS=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Publish to NPM
      if: steps.check_version.outputs.EXISTS == 'false'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Skip publishing
      if: steps.check_version.outputs.EXISTS == 'true'
      run: |
        echo "Skipping NPM publish: Version ${{ steps.get_version.outputs.VERSION }} already exists"
        
    - name: Create GitHub Release
      if: steps.check_version.outputs.EXISTS == 'false'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Console MCP Server v${{ steps.get_version.outputs.VERSION }}
          
          Automated release created from tag v${{ steps.get_version.outputs.VERSION }}
          
          ### Installation
          ```bash
          npm install -g console-mcp@${{ steps.get_version.outputs.VERSION }}
          ```
          
          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
